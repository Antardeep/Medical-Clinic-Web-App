[{"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/index.tsx":"1","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/reportWebVitals.ts":"2","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/App.tsx":"3","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Doctor.tsx":"4","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/ForumList.tsx":"5","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Admin.tsx":"6","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Register.tsx":"7","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Login.tsx":"8","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/PatientHome.tsx":"9","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/RequestList.tsx":"10","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/DocRequestList.tsx":"11","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/PastRequestList.tsx":"12","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Request.tsx":"13","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/assets/styles.js":"14","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/remote/remote-functions.ts":"15","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/DoctorNavBar.tsx":"16","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/PatientNavBar.tsx":"17","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/common/DoctorsList.tsx":"18","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/forum/index.ts":"19","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/common/DoctorInfoItem.tsx":"20","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/remote/index.ts":"21","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/forum/Forum.tsx":"22"},{"size":509,"mtime":1610231284218,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1610037340781,"results":"25","hashOfConfig":"24"},{"size":1592,"mtime":1610825290091,"results":"26","hashOfConfig":"24"},{"size":2745,"mtime":1610743121582,"results":"27","hashOfConfig":"24"},{"size":495,"mtime":1610734230356,"results":"28","hashOfConfig":"24"},{"size":4052,"mtime":1610828916616,"results":"29","hashOfConfig":"24"},{"size":19255,"mtime":1610479775609,"results":"30","hashOfConfig":"24"},{"size":18192,"mtime":1610478559849,"results":"31","hashOfConfig":"24"},{"size":2893,"mtime":1610825290094,"results":"32","hashOfConfig":"24"},{"size":6587,"mtime":1610829070445,"results":"33","hashOfConfig":"24"},{"size":8834,"mtime":1610825290092,"results":"34","hashOfConfig":"24"},{"size":5263,"mtime":1610829886835,"results":"35","hashOfConfig":"24"},{"size":6527,"mtime":1610829475068,"results":"36","hashOfConfig":"24"},{"size":265,"mtime":1610232998511,"results":"37","hashOfConfig":"24"},{"size":6635,"mtime":1610828901755,"results":"38","hashOfConfig":"24"},{"size":7667,"mtime":1610825290093,"results":"39","hashOfConfig":"24"},{"size":7914,"mtime":1610825290095,"results":"40","hashOfConfig":"24"},{"size":660,"mtime":1610829383435,"results":"41","hashOfConfig":"24"},{"size":23,"mtime":1610479257919,"results":"42","hashOfConfig":"24"},{"size":6709,"mtime":1610829291316,"results":"43","hashOfConfig":"24"},{"size":183,"mtime":1610404764196,"results":"44","hashOfConfig":"24"},{"size":11089,"mtime":1610747080599,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"18x09dl",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"48"},"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/index.tsx",[],["101","102"],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/reportWebVitals.ts",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/App.tsx",["103","104"],"import React, {useState} from 'react';\nimport './assets/primary.scss';\nimport { BrowserRouter as Router, Link, Route, Switch, Redirect } from 'react-router-dom';\nimport { Register } from './components/Register';\nimport { Login } from './components/Login';\nimport { Admin } from './components/Admin';\nimport { Doctor } from './components/Doctor';\nimport { PatientHome } from './components/PatientHome';\nimport { RequestList } from './components/RequestList';\nimport { DocRequestList } from './components/DocRequestList';\nimport { PastRequestList } from './components/PastRequestList';\nimport {ForumList} from './components/ForumList'\nimport { Request } from './components/Request';\n\nfunction App() {\n  return (\n    <div>\n      <Router >\n        <Switch>\n          <Route exact path=\"/login\" component={Login} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/admin\" component={Admin} />\n          <Route path=\"/doctor\" component={Doctor} />\n          <Route path=\"/patient\" component={PatientHome} />\n          <Route path=\"/requestList\" component={RequestList} />\n          <Route path=\"/docRequestList\" component={DocRequestList} />\n          <Route path=\"/pastRequestList\" component={PastRequestList} />\n          <Route path=\"/forumList\" component={ForumList} />\n          <Route path=\"/request\" component={Request}/>\n          <Redirect from=\"/\" to=\"/login\" /> \n          \n        </Switch>\n        {/* <Link to=\"/login\"> login</Link> */}\n        {/* <Link to=\"/patient\">Patient</Link> */}\n      </Router> \n    </div>\n  );\n}\n\nexport default App;\n\n      ","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Doctor.tsx",["105","106","107"],"import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Paper, Divider, IconButton } from '@material-ui/core';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport DoctorNavBar from './DoctorNavBar';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n            padding: '2rem',\n            position: 'relative',\n            width: '50%',\n            display: 'flex',\n            flexDirection: 'column',\n            backgroundColor: \"white\",\n            color: '#014F86',\n            marginBottom: '5rem'\n        },\n        editButton: {\n            '&:hover': {\n                color: '#014F86',\n            },\n            color: \"#012A4A\",\n            backgroundColor: \"#EDF2FB\",\n        },\n    })\n);\n\nexport const Doctor: React.FunctionComponent = (props) => {\n    const location: any = useLocation();\n    const history = useHistory();\n    const classes = useStyles();\n    const { firstname, lastname, speciality, age, gender, phone, email, address, education, certification, awards } = location.state.doctorInfo;\n\n    return (\n        <DoctorNavBar>\n            <div style={{ minHeight: '100vh', height: 'auto', backgroundColor: '#EDF2FB', display: 'flex', alignItems: 'center', flexDirection: \"column\" }}>\n                <div className=\"doctorHome\">\n                    <h2>WELCOME</h2>\n                    <h1 style={{ textAlign: 'center' }}>Dr. {firstname} {lastname} <br />Speciality: {speciality}</h1>\n                </div>\n                <Paper elevation={3} classes={{ root: classes.paper }}>\n                    <div style={{display:'flex', justifyContent:'space-between'}}>\n                        <h2>Personal Information</h2>\n                        {/* <IconButton\n                            className='float-right'\n                            onClick={() => history.push('/')}\n                            classes={{\n                                root: classes.editButton,\n                            }}>\n                            <EditIcon style={{ fontSize: 30 }} />\n                        </IconButton> */}\n                    </div>\n                    <Divider />\n                    <h3>Age: {age}</h3>\n                    <h3>Gneder: {gender}</h3>\n                    <h3>Phone: {phone}</h3>\n                    <h3>Email: {email}</h3>\n                    <h3>Address<br />{address}</h3>\n                    <h3>Education<br />{education}</h3>\n                    <h3>Certifications<br />{certification}</h3>\n                    <h3>Awards<br />{awards}</h3>\n                </Paper>\n            </div>\n        </DoctorNavBar>\n    );\n\n}\n\nexport default Doctor;","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/ForumList.tsx",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Admin.tsx",["108"],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Register.tsx",["109"],"import React, { useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { IconButton, Tooltip, Paper, Grid, InputLabel, TextField, RadioGroup, FormControlLabel, Radio, Button, Select, MenuItem } from '@material-ui/core';\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { doctorRegister, patientRegister } from '../remote/remote-functions';\nimport { styles } from '../assets/styles.js';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            '&$underline': {\n                borderBottom: '0',\n            },\n        },\n        underline: {\n            '&:after': {\n                borderBottom: '2px solid #012A4A',\n            },\n        },\n        backButton: {\n            '&:hover': {\n                color: '#014F86',\n            },\n            color: \"#012A4A\",\n            backgroundColor: \"#EDF2FB\",\n            position: 'absolute',\n            top: 5,\n            left: 5,\n        },\n        paper: {\n            padding: '2rem',\n            margin: 'auto',\n            width: '84%',\n            position: 'relative',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            backgroundColor: \"#EDF2FB\",\n        },\n        rootButton: {\n            '&:hover': {\n                backgroundColor: \"#014F86\",\n            },\n            background: \"#012A4A\",\n            borderRadius: \"2rem\",\n            border: 0,\n            color: 'white',\n            fontWeight: 'bold',\n            height: 40,\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\n            width: '20%',\n            float: 'right'\n        },\n    })\n);\n\nexport const Register: React.FunctionComponent = (props) => {\n    const location: any = useLocation();\n    const history = useHistory();\n    const classes = useStyles();\n\n    const [firstname, setFirstname] = useState(\"\");\n    const [lastname, setLastname] = useState(\"\");\n    const [age, setAge] = useState(0);\n    const [gender, setGender] = useState(\"\");\n    const [phone, setPhone] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [language, setLanguage] = useState(\"\");\n    const [healthcardnumber, setHealthcardnumber] = useState(\"\");\n    const [education, setEducation] = useState(\"\");\n    const [certification, setCertification] = useState(\"\");\n    const [speciality, setSpeciality] = useState(\"\");\n    const [awards, setAwards] = useState(\"\");\n    const [error, setError] = useState(\"\");\n\n\n    const onRegisterSubmit = async () => {\n        const patientCredentials = {\n            username: location.state.username,\n            password: location.state.password,\n            firstname: firstname,\n            lastname: lastname,\n            age: age,\n            gender: gender,\n            phone: phone,\n            email: email,\n            address: address,\n            language: language,\n            healthcardnumber: healthcardnumber,\n            role: 'Patient'\n        }\n\n        const doctorCredentials = {\n            username: location.state.username,\n            password: location.state.password,\n            firstname: firstname,\n            lastname: lastname,\n            age: age,\n            gender: gender,\n            phone: phone,\n            email: email,\n            address: address,\n            language: language,\n            education: education,\n            certification: certification,\n            speciality: speciality,\n            awards: awards,\n            status: 'Pending',\n            role: 'Doctor'\n        }\n\n        if (location.state.role === 'Doctor') {\n            if (firstname && lastname && age && gender && speciality) {\n                try {\n                    let user = await doctorRegister(doctorCredentials)\n                    history.push('/');\n                } catch (e) {\n                    console.log(e);\n                }\n            } else {\n                setError(\"Please fill out all required fields\");\n            }\n        } else if (location.state.role === 'Patient') {\n            if (firstname && lastname && age && gender && healthcardnumber) {\n                try {\n                    let user = await patientRegister(patientCredentials)\n                    console.log(\"Doctor registered -> \" + JSON.stringify(user));\n                    history.push({\n                        pathname: '/patient',\n                        state: {\n                            patientInfo: user\n                        },\n                    });\n                } catch (e) {\n                    console.log(e);\n                }\n            } else {\n                setError(\"Please fill out all required fields\");\n            }\n        }\n\n    }\n\n    const MyRadio = withStyles({\n        root: {\n            color: \"#012A4A\",\n            '&$checked': {\n                color: \"#014F86\",\n            },\n        },\n        checked: {},\n    })((props) => <Radio color=\"default\" {...props} />);\n\n    return (\n        <div>\n            <Tooltip title=\"Go Back\">\n                <IconButton\n                    className='float-left'\n                    onClick={() => history.push('/')}\n                    classes={{\n                        root: classes.backButton,\n                    }}>\n                    <ArrowBackIcon style={{ fontSize: 40 }} />\n                </IconButton>\n            </Tooltip>\n            <h2 id=\"registerationTitle\">Fill out the registeration details</h2>\n            <Paper elevation={3} classes={{ root: classes.paper }}>\n                <Grid container spacing={3} >\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> First Name </InputLabel>\n                        <TextField\n                            variant=\"filled\"\n                            fullWidth\n                            required\n                            value={firstname}\n                            onChange={e => setFirstname(e.target.value)}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Last Name </InputLabel>\n                        <TextField\n                            variant=\"filled\"\n                            fullWidth\n                            required\n                            value={lastname}\n                            onChange={e => setLastname(e.target.value)}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Age </InputLabel>\n                        <TextField\n                            type=\"number\"\n                            variant=\"filled\"\n                            fullWidth\n                            value={age}\n                            onChange={e => setAge(parseInt(e.target.value))}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Gender </InputLabel>\n                        <RadioGroup row name=\"gender\" value={gender} onChange={(e: any) => setGender(e.target.value)}>\n                            <FormControlLabel value=\"female\" control={<MyRadio />} label=\"Female\" style={{ color: \"#012A4A\" }} />\n                            <FormControlLabel value=\"male\" control={<MyRadio />} label=\"Male\" style={{ color: \"#012A4A\" }} />\n                            <FormControlLabel value=\"other\" control={<MyRadio />} label=\"Other\" style={{ color: \"#012A4A\" }} />\n                        </RadioGroup>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}> Phone Number</InputLabel>\n                        <TextField\n                            variant=\"filled\"\n                            fullWidth\n                            value={phone}\n                            onChange={e => setPhone(e.target.value)}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}> Email Address</InputLabel>\n                        <TextField\n                            variant=\"filled\"\n                            fullWidth\n                            value={email}\n                            onChange={e => setEmail(e.target.value)}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}> Residential Address </InputLabel>\n                        <TextField\n                            variant=\"filled\"\n                            fullWidth\n                            value={address}\n                            onChange={e => setAddress(e.target.value)}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <InputLabel style={{ marginBottom: 0 }}> Language Spoken </InputLabel>\n                        <TextField\n                            variant=\"filled\"\n                            fullWidth\n                            value={language}\n                            onChange={e => setLanguage(e.target.value)}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.root,\n                                    underline: classes.underline,\n                                },\n                            }}\n                        />\n                    </Grid>\n                    {\n                        (location.state.role === 'Patient') ?\n                            <Grid item xs={12}>\n                                <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Health Card Number </InputLabel>\n                                <TextField\n                                    variant=\"filled\"\n                                    fullWidth\n                                    value={healthcardnumber}\n                                    onChange={e => setHealthcardnumber(e.target.value)}\n                                    style={{ marginBottom: 5, marginTop: 5 }}\n                                    InputProps={{\n                                        classes: {\n                                            root: classes.root,\n                                            underline: classes.underline,\n                                        },\n                                    }}\n                                />\n                            </Grid>\n                            :\n                            null\n                    }\n\n                    {\n                        (location.state.role === 'Doctor') ?\n                            <>\n                                <Grid item xs={6}>\n                                    <InputLabel style={{ marginBottom: 0 }}  className = \"required\"> Speciality </InputLabel>\n                                    <Select\n                                        variant=\"filled\"\n                                        value={speciality}\n                                        fullWidth\n                                        onChange={e => setSpeciality(String(e.target.value))}\n                                        style={{ marginBottom: 5, marginTop: 5 }}\n                                    >\n                                        <MenuItem value={'Allergy and immunology'}>Allergy and immunology</MenuItem>\n                                        <MenuItem value={'Anesthesiologist'}>Anesthesiologist</MenuItem>\n                                        <MenuItem value={'Cardiologist'}>Cardiologist</MenuItem>\n                                        <MenuItem value={'Dermatology'}>Dermatology</MenuItem>\n                                        <MenuItem value={'Emergency medicine'}>Emergency medicine</MenuItem>\n                                        <MenuItem value={'Family medicine'}>Family medicine</MenuItem>\n                                        <MenuItem value={'Medical genetics'}>Medical genetics</MenuItem>\n                                        <MenuItem value={'Neurology'}>Neurology</MenuItem>\n                                        <MenuItem value={'Ophthalmology'}>Ophthalmology</MenuItem>\n                                        <MenuItem value={'Pathology'}>Pathology</MenuItem>\n                                        <MenuItem value={'Physical medicine and rehabilitation'}>Physical medicine and rehabilitation</MenuItem>\n                                        <MenuItem value={'Psychiatry'}>Psychiatry</MenuItem>\n                                        <MenuItem value={'Radiation oncology'}>Radiation oncology</MenuItem>\n                                        <MenuItem value={'Surgery'}>Surgery</MenuItem>\n                                        <MenuItem value={'Urology'}>Urology</MenuItem>\n                                    </Select>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <InputLabel style={{ marginBottom: 0 }}> Certifications </InputLabel>\n                                    <TextField\n                                        variant=\"filled\"\n                                        fullWidth\n                                        value={certification}\n                                        onChange={e => setCertification(e.target.value)}\n                                        style={{ marginBottom: 5, marginTop: 5 }}\n                                        InputProps={{\n                                            classes: {\n                                                root: classes.root,\n                                                underline: classes.underline,\n                                            },\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <InputLabel style={{ marginBottom: 0 }}> Education Details </InputLabel>\n                                    <TextField\n                                        variant=\"filled\"\n                                        fullWidth\n                                        multiline\n                                        rows={5}\n                                        value={education}\n                                        onChange={e => setEducation(e.target.value)}\n                                        style={{ marginBottom: 5, marginTop: 5 }}\n                                        InputProps={{\n                                            classes: {\n                                                root: classes.root,\n                                                underline: classes.underline,\n                                            },\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <InputLabel style={{ marginBottom: 0 }}> Awards </InputLabel>\n                                    <TextField\n                                        variant=\"filled\"\n                                        fullWidth\n                                        multiline\n                                        rows={5}\n                                        value={awards}\n                                        onChange={e => setAwards(e.target.value)}\n                                        style={{ marginBottom: 5, marginTop: 5 }}\n                                        InputProps={{\n                                            classes: {\n                                                root: classes.root,\n                                                underline: classes.underline,\n                                            },\n                                        }}\n                                    />\n                                </Grid>\n                            </>\n                            :\n                            null\n                    }\n\n                    <Grid item xs={12}>\n                        <Button\n                            type=\"button\"\n                            variant=\"contained\"\n                            className=\"submit\"\n                            onClick={() => onRegisterSubmit()}\n                            classes={{\n                                root: classes.rootButton,\n                            }}\n                        > REGISTER </Button>\n                        {(error) ? <p style={styles.errorTextStyle}>{error}</p> : null}\n                    </Grid>\n                </Grid>\n            </Paper>\n        </div>\n    );\n}\n\nexport default Register;","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Login.tsx",["110"],"import React, { useState } from \"react\";\nimport { TextField, Tabs, Tab, Button, IconButton, Card, InputAdornment, RadioGroup, Radio, FormControlLabel } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\nimport { makeStyles, withStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { styles } from '../assets/styles.js';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport Background from '../assets/img/medicalBackground.jpg';\nimport { userLogin } from '../remote/remote-functions';\n\nimport { useHistory } from \"react-router-dom\";\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            boxShadow: '1px 3px 12px -3px rgba(0,0,0, 1)',\n            borderRadius: '1.5rem'\n        },\n        cssOutlinedInput: {\n            '&$focused $notchedOutline': {\n                borderColor: \"#014F86\",\n            },\n            height: 50,\n            marginTop: 0,\n            paddingTop: 0\n        },\n\n        notchedOutline: {\n            borderWidth: '1px',\n            borderColor: \"#014F86\"\n        },\n        focused: {\n            borderColor: \"#014F86\"\n        },\n\n        iconfocused: {\n            '&:focus': {\n                outline: 'none',\n            },\n        },\n\n        rootButton: {\n            '&:hover': {\n                backgroundColor: \"#014F86\",\n            },\n            background: \"#012A4A\",\n            borderRadius: 3,\n            border: 0,\n            color: 'white',\n            fontWeight: 'bold',\n            height: 40,\n            boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\n            marginTop: 15\n        },\n        indicator: {\n            backgroundColor: '#012A4A',\n            color: '#012A4A'\n        },\n    }),\n);\n\nfunction TabPanel(props: any) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`scrollable-prevent-tabpanel-${index}`}\n            aria-labelledby={`scrollable-prevent-tab-${index}`}\n            {...other}\n        >\n            {value === index && children}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\n\nexport const Login: React.FunctionComponent = (props) => {\n\n    const history = useHistory();\n\n    const classes = useStyles();\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\n    const [hidden, setHidden] = useState(true);\n    const [errorUser, setErrorUser] = useState(false);\n    const [errorTextUser, setErrorTextUser] = useState(\"\");\n    const [errorPassword, setErrorPassword] = useState(false);\n    const [errorTextPassword, setErrorTextPassword] = useState(\"\");\n    const [errorAuth, setErrorAuth] = useState(false);\n    const [error, setError] = useState('');\n    const [role, setRole] = useState('');\n    const [tabValue, setTabValue] = useState(0);\n    const [match, setMatch] = useState(false);\n\n\n\n    const onChangeUsername = (event: any) => {\n        setErrorUser(false);\n        setErrorTextUser('');\n        setUsername(event.target.value);\n    }\n\n    const passwordOnChange = (event: any) => {\n        setErrorPassword(false);\n        setErrorTextPassword('');\n        setPassword(event.target.value);\n    }\n    const confirmPasswordOnChange = (event: any) => {\n        setConfirmPassword(event.target.value);\n    }\n\n    const handleTabChange = (event: any, newValue: any) => {\n        setTabValue(newValue);\n    };\n\n    const handleChangeIndex = (index: any) => {\n        setTabValue(index);\n    };\n\n    const toggleShow = () => {\n        setHidden(!hidden);\n    }\n\n    const onLogin = async () => {\n\n        if (username && password) {\n            try {\n                let user = await userLogin(role, username, password);\n                console.log(JSON.stringify(user))\n                if(user){\n                authentication(user);\n                }else{\n                    setErrorAuth(true)\n                    setError('User Not Found');\n                }\n            } catch (e) {\n                setErrorAuth(true)\n                setError('User Not Found');\n                console.log(e);\n            }\n        } else {\n            if (!password) {\n                setErrorPassword(true);\n                setErrorTextPassword('Please enter password')\n            }\n            if (!username) {\n                setErrorUser(true);\n                setErrorTextUser('Please enter user')\n            }\n        }\n    }\n\n    const authentication = (user: any) => {\n        if(user.role === \"Admin\"){\n            history.push({\n                pathname: '/admin',\n                state: {  //to access state use useLocation hook in function component\n                    adminInfo: user\n                },\n            });\n        }else if(user.role === \"Doctor\"){\n            if(user.status === 'Approved'){\n                history.push({\n                    pathname: '/doctor',\n                    state: {  //to access state use useLocation hook in function component\n                        doctorInfo: user\n                    },\n                });\n            }else if(user.status === 'Pending'){\n                setErrorAuth(true)\n                setError('Account is in Pending Status')\n            }else if(user.status === 'Rejected'){\n                setErrorAuth(true)\n                setError('Account is Rejected')\n            }  \n        }else if(user.role === \"Patient\"){\n            history.push({\n                pathname: '/patient',\n                state: {  //to access state use useLocation hook in function component\n                    patientInfo: user\n                },\n            });\n        }\n    }\n\n    const onRegister = () => {\n        if (username && password && role) {\n            if (password !== confirmPassword) {\n                setMatch(true)\n            } else {\n                history.push({\n                    pathname: '/register',\n                    state: {  //to access state use useLocation hook in function component\n                        role: role,\n                        username: username,\n                        password: password \n                    },\n                });\n            }\n        }\n    }\n\n    const MyRadio = withStyles({\n        root: {\n            color: \"#012A4A\",\n            '&$checked': {\n                color: \"#014F86\",\n            },\n        },\n        checked: {},\n    })((props) => <Radio color=\"default\" {...props} />);\n\n    const handleRadioChange = (event: any) => {\n        setRole(event.target.value);\n    };\n\n\n\n    return (\n        <div style={{ backgroundImage: `url(${Background})`, backgroundSize: 'cover', minHeight: '100vh', height: 'auto' }}>\n            <h1 id=\"title\">Revature Medical Clinic</h1>\n            <Card className=\"cardContainer\" classes={{ root: classes.root }}>\n                <Tabs\n                    value={tabValue}\n                    onChange={handleTabChange}\n                    variant=\"fullWidth\"\n                    classes={{\n                        indicator: classes.indicator,\n                    }}\n                    className=\"loginTab\"\n                >\n                    <Tab label=\"LOGIN\" style={{ color: \"white\", backgroundColor: \"#014F86\", width: \"30%\" }} />\n                    <Tab label=\"REGISTER\" style={{ color: \"white\", backgroundColor: \"#014F86\" }} />\n                </Tabs>\n                {/*  ----------------------------LOGIN------------------------ */}\n                <TabPanel value={tabValue} index={0}>\n                    <form className=\"form\" noValidate>\n                        <div className=\"cardRadio\">\n                            <RadioGroup row name=\"role\" onChange={handleRadioChange} style={{ color: \"#012A4A\" }}>\n                                <FormControlLabel\n                                    value=\"Patient\"\n                                    control={<MyRadio />}\n                                    label=\"Patient\"\n                                    labelPlacement=\"top\"\n                                    style={{ color: \"#012A4A\" }}\n                                />\n                                <FormControlLabel\n                                    value=\"Doctor\"\n                                    control={<MyRadio />}\n                                    label=\"Doctor\"\n                                    labelPlacement=\"top\"\n                                    style={{ color: \"#012A4A\" }}\n                                />\n                                <FormControlLabel\n                                    value=\"Admin\"\n                                    control={<MyRadio />}\n                                    label=\"Admin\"\n                                    labelPlacement=\"top\"\n                                    style={{ color: \"#012A4A\" }}\n                                />\n                            </RadioGroup>\n                        </div>\n                        <TextField\n                            error={errorUser}\n                            helperText={errorTextUser}\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            placeholder=\"Username\"\n                            name=\"username\"\n                            value={username}\n                            onChange={onChangeUsername}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.cssOutlinedInput,\n                                    notchedOutline: classes.notchedOutline,\n                                    focused: classes.focused,\n                                },\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <AccountCircle />\n                                    </InputAdornment>\n                                )\n                            }}\n                        />\n\n                        <TextField\n                            error={errorPassword}\n                            helperText={errorTextPassword}\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            placeholder=\"Password\"\n                            type={hidden ? \"password\" : \"text\"}\n                            value={password}\n                            onChange={passwordOnChange}\n                            style={{ marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.cssOutlinedInput,\n                                    notchedOutline: classes.notchedOutline,\n                                    focused: classes.focused,\n                                },\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <VpnKeyIcon />\n                                    </InputAdornment>\n                                ),\n                                endAdornment: (\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle password visibility\"\n                                            onClick={toggleShow}\n                                            style={{ color: \"#014F86\" }}\n                                        >\n                                            {hidden ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                )\n                            }}\n                        />\n\n                        <Button\n                            type=\"button\"\n                            fullWidth\n                            variant=\"contained\"\n                            className=\"submit\"\n                            onClick={() => onLogin()}\n                            classes={{\n                                root: classes.rootButton,\n                            }}\n                        > LOG IN </Button>\n\n                        {(errorAuth) ? <p style={styles.errorTextStyle}>{error}</p> : null}\n\n                    </form>\n                </TabPanel>\n                {/*  ----------------------------Register------------------------ */}\n\n                <TabPanel value={tabValue} index={1}>\n                    <form className=\"form\" noValidate>\n                        <div className=\"cardRadio\">\n                            <RadioGroup row name=\"role\" onChange={handleRadioChange} style={{ color: \"#012A4A\" }}>\n                                <FormControlLabel\n                                    value=\"Patient\"\n                                    control={<MyRadio />}\n                                    label=\"Patient\"\n                                    labelPlacement=\"top\"\n                                    style={{ color: \"#012A4A\" }}\n                                />\n                                <FormControlLabel\n                                    value=\"Doctor\"\n                                    control={<MyRadio />}\n                                    label=\"Doctor\"\n                                    labelPlacement=\"top\"\n                                    style={{ color: \"#012A4A\" }}\n                                />\n                            </RadioGroup>\n                        </div>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            placeholder=\"New Username\"\n                            name=\"username\"\n                            value={username}\n                            onChange={onChangeUsername}\n                            style={{ marginBottom: 5, marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.cssOutlinedInput,\n                                    notchedOutline: classes.notchedOutline,\n                                    focused: classes.focused,\n                                },\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <AccountCircle />\n                                    </InputAdornment>\n                                )\n                            }}\n                        />\n\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            placeholder=\"New Password\"\n                            type=\"password\"\n                            value={password}\n                            onChange={passwordOnChange}\n                            style={{ marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.cssOutlinedInput,\n                                    notchedOutline: classes.notchedOutline,\n                                    focused: classes.focused,\n                                },\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <VpnKeyIcon />\n                                    </InputAdornment>\n                                )\n                            }}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"confirm password\"\n                            placeholder=\"Confirm Password\"\n                            type=\"password\"\n                            value={confirmPassword}\n                            onChange={confirmPasswordOnChange}\n                            style={{ marginTop: 5 }}\n                            InputProps={{\n                                classes: {\n                                    root: classes.cssOutlinedInput,\n                                    notchedOutline: classes.notchedOutline,\n                                    focused: classes.focused,\n                                },\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <VpnKeyIcon />\n                                    </InputAdornment>\n                                )\n                            }}\n                        />\n\n                        <Button\n                            type=\"button\"\n                            fullWidth\n                            variant=\"contained\"\n                            className=\"submit\"\n                            onClick={() => onRegister()}\n                            classes={{\n                                root: classes.rootButton,\n                            }}\n                        > REGISTER </Button>\n\n                        {(match) ? <p style={styles.errorTextStyle}>Password doesn't match</p> : null}\n\n                    </form>\n\n                </TabPanel>\n\n\n            </Card>\n        </div>\n    );\n}\n\n","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/PatientHome.tsx",["111"],"import React from 'react';\nimport '../assets/patient.scss'\nimport { PatientNavBar } from './PatientNavBar';\nimport { Paper, Divider, IconButton } from '@material-ui/core';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { useLocation } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n            padding: '2rem',\n            position: 'relative',\n            width: '50%',\n            display: 'flex',\n            flexDirection: 'column',\n            backgroundColor: \"white\",\n            color: '#014F86',\n            marginBottom: '5rem'\n        },\n        editButton: {\n            '&:hover': {\n                color: '#014F86',\n            },\n            color: \"#012A4A\",\n            backgroundColor: \"#EDF2FB\",\n        },\n    })\n);\n\nexport const PatientHome: React.FunctionComponent<any> = () => {\n    const location: any = useLocation();\n    const classes = useStyles();\n    const {firstname, lastname, gender, healthcardnumber, address, age, email, phone} = location.state.patientInfo\n\n    return(\n        <>\n                <PatientNavBar patientInfo={location.state.patientInfo}>\n                    <div style={{ minHeight: '100vh', height: 'auto', backgroundColor: '#EDF2FB', display: 'flex', alignItems: 'center', flexDirection: \"column\" }}>\n                        <div className=\"patientHome\">\n                            <h2>WELCOME</h2>\n                            <h1 style={{ textAlign: 'center' }}>{firstname} {lastname} <br /></h1>\n                        </div>\n                        <Paper elevation={3} classes={{ root: classes.paper }}>\n                            <div style={{display:'flex', justifyContent:'space-between'}}>\n                                <h2>Personal Information</h2>\n                                {/* <IconButton\n                                    className='float-right'\n                                    onClick={() => history.push('/')}\n                                    classes={{\n                                        root: classes.editButton,\n                                    }}>\n                                    <EditIcon style={{ fontSize: 30 }} />\n                                </IconButton> */}\n                            </div>\n                            <Divider />\n                            <h3>Health Card Number: {healthcardnumber}</h3>\n                            <h3>Age: {age}</h3>\n                            <h3>Gender: {gender}</h3>\n                            <h3>Phone: {phone}</h3>\n                            <h3>Email: {email}</h3>\n                            <h3>Phone: {phone}</h3>\n                            <h3>Address<br />{address}</h3>\n\n                        </Paper>\n                    </div>\n                </PatientNavBar>\n\n          </>  \n        \n    )\n}\n\nexport default PatientHome;","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/RequestList.tsx",["112","113","114","115","116"],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/DocRequestList.tsx",["117","118"],"import React, { useEffect, useState } from 'react'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Button, Paper, Grid, TextField } from '@material-ui/core';\nimport { getPendingRequestList, postDoctorResponse } from '../remote/remote-functions';\nimport { useLocation } from 'react-router-dom';\nimport DoctorNavBar from './DoctorNavBar';\nimport { styles } from '../assets/styles.js';\n\ninterface IPatient {\n    healthCardNumber: number,\n    firstname: string,\n    lastname: string\n    email: string\n    phone: string\n    timeStamp: string,\n}\n\ninterface IDoctor {\n    firstname: string\n    lastname: string\n    email: string\n    phone: string\n}\ninterface IReqList {\n    patientId: IPatient,\n    doctorId: IDoctor,\n    problem: string,\n    responsed: boolean,\n    timeStamp: string,\n    requestId: number\n    prescription: string\n}\n\n\nexport const DocRequestList: React.FunctionComponent<any> = () => {\n\n    const [data, setRequestList] = useState<IReqList[]>([])\n    const location: any = useLocation()\n    const [expanded, setExpanded] = React.useState<string | false>(false);\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            paper: {\n                padding: '2rem',\n                position: 'relative',\n                backgroundColor: \"#EDF2FB\",\n                margin: '2rem',\n                color: '#012A4A'\n            },\n            heading: {\n                fontSize: theme.typography.pxToRem(15),\n                flexBasis: '33.33%',\n                flexShrink: 0,\n            },\n            secondaryHeading: {\n                fontSize: theme.typography.pxToRem(15),\n                color: theme.palette.text.secondary,\n            },\n            submitButton: {\n                '&:hover': {\n                    background: \"#4BB543\",\n                },\n                backgroundColor: '#014F86',\n                color: 'white',\n                fontWeight: 'bolder',\n                width: '8rem',\n                boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\n                float: \"right\",\n                height: '2rem'\n            },\n        }),\n    )\n\n    const [prescription, setPrescription] = useState<string>(\"\");\n    const [doctorresponse, setDocRes] = useState<string>(\"\");\n    const [hasappointment, setAppointment] = useState<boolean>(false);\n    const [error, setError] = useState<boolean>(false);\n\n    const handlePrescription = e => {\n        setPrescription(e.target.value);\n    }\n\n    const handleDocRes = e => {\n        setDocRes(e.target.value);\n    }\n\n    const handleAppointment = (event: any) => {\n        setAppointment(true);\n    };\n\n    const postDocResponse = async (reqid) => {\n        const docResponse = {\n            prescription: prescription,\n            doctorresponse: doctorresponse,\n            requestId: reqid,\n            hasappointment: hasappointment\n        }\n        if(hasappointment || prescription || doctorresponse){\n        const data = await postDoctorResponse(docResponse);\n        setExpanded(false)\n        }else{\n            setError(true)\n        }\n    }\n\n    function getDoctorInfo(pinfo: IPatient) {\n\n        return (\n            <>\n                <b>Patient Details:</b><br />\n\n           Name: {pinfo ? pinfo.firstname: \"\" } {pinfo ? pinfo.lastname : \"\"}<br />\n           email: {pinfo ? pinfo.email : \"\"} <br />\n           Phone: {pinfo ? pinfo.phone : \"\"}<br />\n            </>\n        )\n    }\n\n    async function getContent() {\n        let getReqList = await getPendingRequestList(location.state.doctorInfo.doctorId)\n        setRequestList(getReqList)\n    }\n\n    useEffect(() => {\n        getContent()\n    }, [expanded])\n\n\n    const classes = useStyles();\n\n    const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\n        setExpanded(isExpanded ? panel : false);\n    }\n\n    return (\n\n        <DoctorNavBar>\n            <Paper elevation={3} classes={{ root: classes.paper }}>\n\n                <Grid container spacing={2}>\n                    <Grid item xs={6}><h2>Pending Patient's Request List</h2></Grid>\n                    {data.map((text, i) =>\n                        <Grid item xs={12} key={i}>\n                            <Accordion expanded={expanded === `${text.requestId}`} onChange={handleChange(`${text.requestId}`)}>\n                                <AccordionSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1bh-content\"\n                                    id=\"panel1bh-header\"\n                                >\n                                    <Typography className={classes.heading} >Reference number: {text.requestId}\n                                        <input type='hidden' name=\"props.requestid\" value={text.requestId} />\n                                    </Typography>\n                                    <Typography className={classes.secondaryHeading}>Status: {text.responsed ? \"Resolved\" : \"Pending\"}</Typography>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <Typography style={{ width: \"100%\", padding: '3rem' }}>\n                                        {getDoctorInfo(text.patientId)}<br /><br />\n\n                                        <b>Problem/Symptoms</b>: {text.problem}<br />\n                                        <b>Requested Date:</b> {text.timeStamp}<br /><br />\n\n                                        <Grid container spacing={3}>\n                                            <Grid item xs={6}>\n                                            <b>Medication:</b> <br />\n                                            <TextField\n                                                id=\"outlined-required\"\n                                                label=\"Medication details\"\n                                                multiline\n                                                rows={5}\n                                                fullWidth\n                                                value={prescription} onChange={handlePrescription}\n                                                variant=\"outlined\"\n                                                style={{ marginTop: '5px' }}\n                                            />\n                                            </Grid>\n                                            <Grid item xs={6}>\n                                            <b> Advice to patient: </b><br />\n                                            <TextField\n                                                id=\"outlined-required\"\n                                                label=\"Any Precautions\"\n                                                multiline\n                                                rows={5}\n                                                fullWidth\n                                                value={doctorresponse} onChange={handleDocRes}\n                                                variant=\"outlined\"\n                                                style={{ marginTop: '5px' }}\n                                            />\n                                            </Grid>\n                                        </Grid>\n\n                                        <br /> <br />\n\n                                        <b>Need Appointment:</b>\n                                        <input\n                                            type=\"checkbox\"\n                                            onChange={handleAppointment}\n                                        />\n                                        <br />\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={() => postDocResponse(text.requestId)}\n                                            classes={{ root: classes.submitButton }}>\n                                            Submit\n                                    </Button>\n                                    {(error) ? <p style={styles.errorTextStyle}>Please give response</p> : null}\n\n                                    </Typography>\n                                </AccordionDetails>\n                            </Accordion>\n                        </Grid>\n                    )}\n\n                </Grid>\n            </Paper>\n        </DoctorNavBar>\n    )\n\n}\n","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/PastRequestList.tsx",["119","120"],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/Request.tsx",["121"],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/assets/styles.js",[],["122","123"],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/remote/remote-functions.ts",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/DoctorNavBar.tsx",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/PatientNavBar.tsx",["124"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport HomeIcon from '@material-ui/icons/Home';\nimport SpeakerNotesIcon from '@material-ui/icons/SpeakerNotes';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    hide: {\n      display: 'none',\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: 'flex-end',\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -drawerWidth,\n    },\n    contentShift: {\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n    toolbar: {\n      backgroundColor: \"#014F86\"\n    },\n    iconStyle: {\n      color: \"#012A4A\",\n    },\n  }),\n);\n\n\n\n\nexport const PatientNavBar:React.FunctionComponent<any> = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = useState(false);\n  const history = useHistory();\n  const location: any = useLocation();\n\n  const navbarData = [\n    {\n      name: 'Home',\n      path: '/patient',\n    },\n    {\n      name: 'Past requests',\n      path: '/requestList',\n    },\n    {\n      name: 'Create request',\n      path: '/request',\n    },\n    {\n      name: 'Forum',\n      path: '/forumList',\n    },\n    {\n      name: 'Logout',\n      path: '/',\n    }\n  ]\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n \n  const homeClicked = () => {\n    history.push({\n      pathname: navbarData[0].path,\n      state: {  //to access state use useLocation hook in function component\n        patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \n    }\n  })\n  }\n\n  const requestListClicked = () => {\n      history.push({\n        pathname: navbarData[1].path,\n        state: {  //to access state use useLocation hook in function component\n            patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \n        }\n    })\n  }\n\n  const createRequestClicked = () => {\n    history.push({\n      pathname: navbarData[2].path,\n      state: {  //to access state use useLocation hook in function component\n          patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \n      }\n  })\n  }\n\n  const forumClicked = () => {\n    history.push({\n      pathname: navbarData[3].path,\n      state: {  //to access state use useLocation hook in function component\n          patientInfo: props.patientInfo ? props.patientInfo : location.state.patientInfo \n      }\n  })\n  }\n\n  const logoutClicked = () => {\n    history.push(navbarData[4].path)\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h5\" noWrap>\n            Revature Medical Clinic\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        \n        <div className={classes.drawerHeader}>\n          {props.patientInfo ? props.patientInfo.firstname : location.state.patientInfo.firstname } {\" \"}\n          {props.patientInfo ? props.patientInfo.lastname : location.state.patientInfo.lastname }\n          <IconButton onClick={handleDrawerClose}>\n          {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n\n          <List>\n\n                <ListItem onClick={homeClicked}  button key={navbarData[0].name}>\n                <ListItemIcon><HomeIcon classes={{root: classes.iconStyle}}/></ListItemIcon>\n                <ListItemText primary={navbarData[0].name} />\n                </ListItem>\n          \n                <ListItem onClick={requestListClicked}  button key={navbarData[1].name}>\n                <ListItemIcon><DescriptionIcon classes={{root: classes.iconStyle}}/></ListItemIcon>\n                <ListItemText primary={navbarData[1].name} />\n                </ListItem>\n           \n                <ListItem onClick={createRequestClicked}  button key={navbarData[2].name}>\n                <ListItemIcon><NoteAddIcon classes={{root: classes.iconStyle}}/></ListItemIcon>\n                <ListItemText primary={navbarData[2].name} />\n                </ListItem>\n              \n                <ListItem onClick={forumClicked}  button key={navbarData[3].name}>\n                <ListItemIcon><SpeakerNotesIcon classes={{root: classes.iconStyle}}/></ListItemIcon>\n                <ListItemText primary={navbarData[3].name} />\n                </ListItem>\n\n                <ListItem onClick={logoutClicked} button key={navbarData[4].name}>\n                <ListItemIcon><ExitToAppIcon classes={{root: classes.iconStyle}}/></ListItemIcon>\n                <ListItemText primary={navbarData[4].name} />\n                </ListItem>\n              \n          </List>\n        \n        <Divider />\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n          {props.children}\n      </main>\n    </div>\n  );\n}\n\nexport default PatientNavBar","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/common/DoctorsList.tsx",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/forum/index.ts",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/common/DoctorInfoItem.tsx",["125","126"],"import React, { useState } from 'react';\nimport { Paper, Grid, Chip, Avatar, Tooltip, IconButton, LinearProgress, Fade, Backdrop, Modal } from '@material-ui/core';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport { updateStatus } from '../../remote/remote-functions';\nimport { createTrue } from 'typescript';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paperItem: {\n            '&:hover': {\n                backgroundColor: '#0262a6',\n            },\n            marginTop: 10,\n            padding: 5,\n            fontSize: 22,\n            backgroundColor: '#014F86',\n            color: 'white',\n        },\n        ApproveButton: {\n            '&:hover': {\n                color: '#4BB543',\n            },\n            color: \"white\",\n        },\n        DenyButton: {\n            '&:hover': {\n                color: '#DC143C',\n            },\n            color: \"white\",\n        },\n        progressStyle: {\n            backgroundColor: '#EDF2FB'\n        },\n        progressBar: {\n            backgroundColor: '#012A4A'\n        },\n        modal: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginLeft: '15%',\n            marginRight: '15%'\n        },\n        modelPaper: {\n            display: 'flex',\n            justifyContent: 'center',\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            color: '#012A4A'\n        },\n    })\n);\n\n\n\n\nexport const DoctorInfoItem: React.FunctionComponent<any> = (props: any) => {\n    const classes = useStyles();\n\n    const item = props.item;\n    const [updating, setUpdating] = useState(false)\n    const [model, setModel] = useState(false)\n\n\n    const statusColor = (status) => {\n        switch (status) {\n            case 'Approved':\n                return <Chip style={{ backgroundColor: '#4BB543', color: 'white', width: '5rem' }} label='Approved' />;\n            case 'Rejected':\n                return <Chip style={{ backgroundColor: '#DC143C', color: 'white', width: '5rem' }} label='Rejected' />;\n            case 'Pending':\n                return <Chip style={{ backgroundColor: '#e0e0e0', color: '#012A4A', width: '5rem' }} label='Pending' />;\n        }\n    }\n\n    const onSubmit = async (doctorId, status, email) => {\n        try {\n            setUpdating(true)\n            let res = await updateStatus(doctorId, status, email)\n            props.handleChange();\n            setUpdating(false)\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    return (\n        <>\n            <Paper elevation={1} classes={{ root: classes.paperItem }}>\n                <Grid container spacing={1}>\n                    <Grid item xs={3} style={{ marginTop: 8, marginLeft: 10 }}>\n                        {statusColor(item.status)}\n                    </Grid>\n                    <Grid item xs style={{ marginTop: 8 }}>\n                        <Chip avatar={<Avatar style={{ backgroundColor: '#014F86', color: 'white' }}>ID</Avatar>} label={item.doctorId} style={{ fontSize: 20 }} />\n                    </Grid>\n                    <Grid item xs={6} style={{ marginTop: 8 }}  onClick={() => setModel(true)}>\n                        {item.firstname} {item.lastname}\n                    </Grid>\n                    <Grid>\n                        <Tooltip title=\"Approved\">\n                            <span>\n                                <IconButton\n                                    onClick={() => onSubmit(item.doctorId, \"Approved\", item.email)}\n                                    disabled={item.status === 'Approved'}\n                                    classes={{\n                                        root: classes.ApproveButton,\n                                    }}>\n                                    <ThumbUpIcon style={{ fontSize: 35 }} />\n                                </IconButton>\n                            </span>\n                        </Tooltip>\n                    </Grid>\n                    <Grid>\n                        <Tooltip title=\"Reject\">\n                            <IconButton\n                                onClick={() => onSubmit(item.doctorId, \"Rejected\", item.email)}\n                                disabled={item.status === 'Rejected'}\n                                classes={{\n                                    root: classes.DenyButton,\n                                }}>\n                                <ThumbDownIcon style={{ fontSize: 35 }} />\n                            </IconButton>\n                        </Tooltip>\n                    </Grid>\n                </Grid>\n\n            </Paper>\n            {updating === true ?\n                <LinearProgress classes={{ indeterminate: classes.progressStyle, barColorPrimary: classes.progressBar }} />\n                : null}\n            <Modal\n                className={classes.modal}\n                open={model}\n                onClose={() => setModel(false)}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n                <Fade in={model}>\n                    <Grid container className={classes.modelPaper}>\n                        <Grid item xs={4} style={{display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column', backgroundColor: '#EDF2FB'}}>\n                            <h2>Dr. {item.firstname} {item.lastname}</h2>\n                            <h4>{item.speciality}</h4>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <h3 style={{textDecoration: 'underline'}}>SUMMARY</h3>\n                            <h4>Age: {item.age}</h4>\n                            <h4>Gender: {item.gender}</h4>\n                            <h4>Languages Spoken: {item.language}</h4>\n                            <h4>Education: {item.education}</h4>\n                            <h4>Certifications: {item.certification}</h4>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <h3  style={{textDecoration: 'underline'}}>PRIMARY LOCATION OF PRACTICE</h3>\n                            <h4>Address: {item.address}</h4>\n                            <h4> Phone: {item.phone}</h4>\n                            <h4>Email Address: {item.email}</h4>\n                        </Grid>\n                    </Grid>\n                </Fade>\n            </Modal>\n        </>\n    );\n}","/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/remote/index.ts",[],"/Users/antardeepkaur/Desktop/Project2-Team2-FrontEndNew/frontend/src/components/forum/Forum.tsx",["127"],"// import { spawn } from \"child_process\";\nimport React, { useState, useEffect } from \"react\";\n// import { forumList, messageList } from \"./mockups\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\n// import ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\n// import ListItemText from \"@material-ui/core/ListItemText\";\n// import ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\n// import Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\n// import { Message } from \"./Message\";\nimport { Button, Paper, Tooltip, IconButton } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport {\n  postTopic,\n  postMessage,\n  getTopic,\n  getMessage,\n} from \"../../remote/remote-functions\";\nimport moment from \"moment\";\nimport { useLocation } from \"react-router-dom\";\n// RCE CSS\nimport \"react-chat-elements/dist/main.css\";\n// MessageBox component\nimport { MessageBox, ChatItem } from \"react-chat-elements\";\nimport \"../../assets/primary.scss\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      backgroundColor: theme.palette.background.paper,\n      margin: \"auto\",\n    },\n    inline: {\n      display: \"inline\",\n    },\n    bubble: {\n      width: \"-webkit-fill-available\",\n      backgroundColor: \"red\",\n    },\n    paper: {\n      padding: '2rem',\n      // width: '84%',\n      position: 'relative',\n      backgroundColor: \"#EDF2FB\",\n      margin: '2rem'\n    },\n    button: {\n      '&:hover': {\n        backgroundColor: \"#014F86\",\n      },\n      background: \"#012A4A\",\n      borderRadius: \"2rem\",\n      border: 0,\n      color: 'white',\n      fontWeight: 'bold',\n      height: 40,\n      boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\n      width: '20%',\n      marginBottom: '1rem'\n    },\n    postButton: {\n      '&:hover': {\n        background: \"#4BB543\",\n      },\n      backgroundColor: '#014F86',\n      color: 'white',\n      fontWeight: 'bolder',\n      width: '10rem',\n      boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\n      marginRight: '5px'\n    },\n    cancelButton: {\n      '&:hover': {\n        background: \"#DC143C\",\n      },\n      backgroundColor: '#014F86',\n      color: 'white',\n      fontWeight: 'bolder',\n      width: '10rem',\n      boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\n    },\n    backButton: {\n      '&:hover': {\n        color: '#014F86',\n      },\n      color: \"white\",\n      backgroundColor: \"#014F86\",\n    },\n    submitButton: {\n      '&:hover': {\n        background: \"#4BB543\",\n      },\n      backgroundColor: '#014F86',\n      color: 'white',\n      fontWeight: 'bolder',\n      width: '8rem',\n      boxShadow: '0 3px 5px 2px rgba(120, 154, 188, 0.3)',\n      float: \"right\", \n      height: '2rem'\n    },\n  })\n);\n\nexport const Forum: React.FC = (props) => {\n  const [forums, setForums] = useState<any>([]);\n\n  const [message, setMessage] = useState<any>([]);\n\n  const [isShow, setIsShow] = useState<any>(false);\n\n  const [topic, setTopic] = useState<string>();\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [inputShow, setInputShow] = useState<boolean>(false);\n\n  const [inputTopic, setInputTopic] = useState<string>();\n\n  const [inputMessage, setInputMessage] = useState<string>();\n\n  const [currentTopic, setCurrentTopic] = useState<number>();\n\n  const [user, setUser] = useState<any>();\n\n  const location: any = useLocation();\n\n  async function getMessagesByForumId(forumId: number, topic: string) {\n    setIsShow(true);\n\n    setTopic(topic);\n    setLoading(true);\n    setInputShow(false);\n    setCurrentTopic(forumId);\n\n    let response = await getMessage(forumId);\n    console.log(response);\n    setMessage(response);\n    setLoading(false);\n    return response;\n  }\n\n  const onPostTopic = async () => {\n    console.log(\"inputTopic:\" + inputTopic);\n\n    if (inputTopic?.trim() === \"\" || inputTopic === undefined) {\n      console.log(\"null input\");\n      alert(\"input should not be null!!\");\n      return;\n    }\n\n    const topicstring = {\n      topic: inputTopic,\n      username: user.username,\n      role: user.role,\n    };\n    const data = await postTopic(topicstring);\n    console.log(data);\n\n    setForums([...forums, data]);\n    setInputTopic(\"\");\n    setInputShow(false);\n  };\n\n  const handleTopicChange = (e) => {\n    setInputTopic(e.target.value);\n  };\n  const handleMessageChange = (e) => {\n    setInputMessage(e.target.value);\n  };\n\n  const onPostMessage = async () => {\n    console.log(\"inputmessage:\" + inputMessage);\n\n    if (inputMessage?.trim() === \"\" || inputMessage === undefined) {\n      console.log(\"null input\");\n      alert(\"input should not be null!!\");\n      return;\n    }\n    const currentInputMessage =\n      user.role === \"Patient\"\n        ? {\n          message: inputMessage,\n          fromusername: user.username,\n          forumId: {\n            forumId: currentTopic,\n          },\n          patientId: {\n            patientId: user.patientId,\n            username: user.username,\n          },\n        }\n        : {\n          message: inputMessage,\n          fromusername: user.username,\n          forumId: {\n            forumId: currentTopic,\n          },\n          doctorId: {\n            doctorId: user.doctorId,\n            username: user.username,\n          },\n        };\n    const data = await postMessage(currentInputMessage);\n    console.log(data);\n\n    setInputMessage(\"\");\n    setMessage([...message, data]);\n  };\n\n  const classes = useStyles();\n\n  function getContent() {\n    location.state.patientInfo !== undefined\n      ? setUser(location.state.patientInfo)\n      : setUser(location.state.doctorInfo);\n  }\n\n  useEffect(() => {\n    getContent();\n  }, []);\n\n  useEffect(() => {\n    const fetchforum = async () => {\n      const responses = await getTopic();\n      // console.log(responses);\n      setForums(responses);\n    };\n    fetchforum();\n  }, []);\n\n  return (\n    <Paper elevation={3} classes={{ root: classes.paper }}>\n      {/* <div\n      style={{\n        margin: \"auto\",\n        width: \"960px\",\n        borderStyle: \"solid\",\n        borderColor: \"lightblue\",\n      }}\n    > */}\n      {isShow ? (\n        // <Button\n        //   variant=\"contained\"\n        //   color=\"primary\"\n        //   onClick={() => {\n        //     setIsShow(false);\n        //   }}\n        // >\n        //   Back\n        // </Button>\n        <Tooltip  title=\"Go Back\">\n          <IconButton\n            onClick={() => {setIsShow(false)}}\n            classes={{root: classes.backButton}}>\n              <ArrowBackIcon style={{ fontSize: 40 }} />\n          </IconButton>\n        </Tooltip>\n      ) : null}\n      {isShow ? (\n        <div>\n          <h1 style={{ textAlign: \"center\" }}>{topic}</h1>\n          <Divider />\n        </div>\n      ) : null}\n      <Grid container>\n        {!isShow ? (\n          <Grid item xs={12}>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                setInputShow(true);\n              }}\n              classes={{\n                root: classes.button,\n              }}\n            >\n              New Post\n            </Button>\n            {inputShow ? (\n              <div style={{ textAlign: \"center\", marginTop: \"30px\" }}>\n                <TextField\n                  id=\"standard-basic\"\n                  label=\"Input your topic\"\n                  fullWidth\n                  value={inputTopic}\n                  onChange={handleTopicChange}\n                  multiline\n                  variant=\"outlined\"\n                />\n                <br />\n                <div style={{ margin: '1rem' }}>\n                  <Button\n                    variant=\"contained\"\n                    type=\"submit\"\n                    onClick={() => onPostTopic()}\n                    classes={{\n                      root: classes.postButton,\n                    }}\n                  >\n                    Post\n                </Button>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() => setInputShow(false)}\n                    classes={{\n                      root: classes.cancelButton,\n                    }}\n                  >\n                    Cancel\n                </Button>\n                </div>\n              </div>\n            ) : null}\n            <List className={classes.root}>\n              {forums.map((r, index) => (\n                <ChatItem\n                  avatar={\n                    r.role !== \"Patient\"\n                      ? \"https://www.cliparthut.com/images/150/FPesi.png\"\n                      : \"https://www.cliparthut.com/images/149/WDCFg.png\"\n                  }\n                  alt={r.username}\n                  title={r.topic}\n                  subtitle={\"by:\" + r.username}\n                  dateString={moment(r.timeStamp).format(\"YYYY-MM-DD HH:mm:ss\")}\n                  onClick={() => getMessagesByForumId(r.forumId, r.topic)}\n                />\n              ))}\n\n              <Divider variant=\"inset\" component=\"li\" />\n            </List>\n          </Grid>\n        ) : null}\n\n        {/* <Button onClick= {()=>getMessagesByForumId(3)}>click</Button> */}\n        {loading ? <Typography variant=\"h4\">Loading......</Typography> : null}\n        {isShow ? (\n          <Grid item xs={12}>\n            {!loading\n              ? message.map((m, index) => (\n                <MessageBox\n                  type={\"text\"}\n                  text={\"by:\" + m.fromusername}\n                  title={m.message}\n                  dateString={moment(m.timeStamp).format(\n                    \"YYYY-MM-DD HH:mm:ss\"\n                  )}\n                  position={\n                    user.username !== m.fromusername ? \"left\" : \"right\"\n                  }\n                />\n              ))\n              : null}\n            {!loading ? (\n              <div\n                style={{\n                  float: \"right\",\n                  marginTop: \"30px\",\n                  textAlign: \"center\",\n                  display: 'flex',\n                  alignItems: 'flex-end'\n                }}\n              >\n                <TextField\n                  id=\"standard-basic\"\n                  label=\"Write your post\"\n                  name=\"message\"\n                  multiline\n                  rows={4}\n                  value={inputMessage}\n                  onChange={handleMessageChange}\n                  variant=\"outlined\"\n                  style={{marginRight: '1rem', width: '20rem', backgroundColor:'white'}}\n                />\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={onPostMessage}\n                  classes={{root: classes.submitButton}}\n                >\n                  Submit\n                </Button>\n              </div>\n            ) : null}\n          </Grid>\n        ) : null}\n      </Grid>\n      {/* </div> */}\n    </Paper>\n  );\n};\n",{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":1,"column":16,"nodeType":"134","messageId":"135","endLine":1,"endColumn":24},{"ruleId":"132","severity":1,"message":"136","line":3,"column":35,"nodeType":"134","messageId":"135","endLine":3,"endColumn":39},{"ruleId":"132","severity":1,"message":"137","line":3,"column":26,"nodeType":"134","messageId":"135","endLine":3,"endColumn":36},{"ruleId":"132","severity":1,"message":"138","line":6,"column":8,"nodeType":"134","messageId":"135","endLine":6,"endColumn":16},{"ruleId":"132","severity":1,"message":"139","line":32,"column":11,"nodeType":"134","messageId":"135","endLine":32,"endColumn":18},{"ruleId":"132","severity":1,"message":"140","line":37,"column":11,"nodeType":"134","messageId":"135","endLine":37,"endColumn":24},{"ruleId":"132","severity":1,"message":"141","line":117,"column":25,"nodeType":"134","messageId":"135","endLine":117,"endColumn":29},{"ruleId":"132","severity":1,"message":"142","line":128,"column":11,"nodeType":"134","messageId":"135","endLine":128,"endColumn":28},{"ruleId":"132","severity":1,"message":"137","line":4,"column":26,"nodeType":"134","messageId":"135","endLine":4,"endColumn":36},{"ruleId":"132","severity":1,"message":"143","line":2,"column":8,"nodeType":"134","messageId":"135","endLine":2,"endColumn":13},{"ruleId":"132","severity":1,"message":"144","line":10,"column":10,"nodeType":"134","messageId":"135","endLine":10,"endColumn":16},{"ruleId":"132","severity":1,"message":"145","line":13,"column":10,"nodeType":"134","messageId":"135","endLine":13,"endColumn":17},{"ruleId":"132","severity":1,"message":"146","line":96,"column":14,"nodeType":"134","messageId":"135","endLine":96,"endColumn":25},{"ruleId":"147","severity":1,"message":"148","line":132,"column":8,"nodeType":"149","endLine":132,"endColumn":10,"suggestions":"150"},{"ruleId":"132","severity":1,"message":"151","line":104,"column":15,"nodeType":"134","messageId":"135","endLine":104,"endColumn":19},{"ruleId":"147","severity":1,"message":"148","line":131,"column":8,"nodeType":"149","endLine":131,"endColumn":18,"suggestions":"152"},{"ruleId":"132","severity":1,"message":"153","line":41,"column":7,"nodeType":"134","messageId":"135","endLine":41,"endColumn":16},{"ruleId":"147","severity":1,"message":"148","line":93,"column":8,"nodeType":"149","endLine":93,"endColumn":10,"suggestions":"154"},{"ruleId":"132","severity":1,"message":"155","line":30,"column":17,"nodeType":"134","messageId":"135","endLine":30,"endColumn":20},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"136","line":23,"column":10,"nodeType":"134","messageId":"135","endLine":23,"endColumn":14},{"ruleId":"132","severity":1,"message":"156","line":7,"column":10,"nodeType":"134","messageId":"135","endLine":7,"endColumn":20},{"ruleId":"132","severity":1,"message":"155","line":82,"column":17,"nodeType":"134","messageId":"135","endLine":82,"endColumn":20},{"ruleId":"147","severity":1,"message":"148","line":225,"column":6,"nodeType":"149","endLine":225,"endColumn":8,"suggestions":"157"},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'IconButton' is defined but never used.","'EditIcon' is defined but never used.","'history' is assigned a value but never used.","'location' is assigned a value but never used.","'user' is assigned a value but never used.","'handleChangeIndex' is assigned a value but never used.","'axios' is defined but never used.","'Button' is defined but never used.","'Preview' is defined but never used.","'downloadDom' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getContent'. Either include it or remove the dependency array.","ArrayExpression",["160"],"'data' is assigned a value but never used.",["161"],"'useStyles' is assigned a value but never used.",["162"],"'res' is assigned a value but never used.","'createTrue' is defined but never used.",["163"],"no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"164","fix":"168"},{"desc":"164","fix":"169"},"Update the dependencies array to be: [getContent]",{"range":"170","text":"171"},"Update the dependencies array to be: [expanded, getContent]",{"range":"172","text":"173"},{"range":"174","text":"171"},{"range":"175","text":"171"},[3904,3906],"[getContent]",[3967,3977],"[expanded, getContent]",[2605,2607],[5890,5892]]